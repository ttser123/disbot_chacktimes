import discord
from discord.ext import commands, tasks
import os
import time
import json
import asyncio
from dotenv import load_dotenv
from datetime import datetime

# ‡πÇ‡∏´‡∏•‡∏î Token ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
DATA_DIR = os.path.join(os.path.dirname(__file__), 'data')
os.makedirs(DATA_DIR, exist_ok=True)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents
intents = discord.Intents.default()
intents.voice_states = True
intents.members = True
intents.message_content = True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Bot ‡∏û‡∏£‡πâ‡∏≠‡∏° prefix ‡πÅ‡∏•‡∏∞ intents
bot = commands.Bot(command_prefix='!', intents=intents)

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
voice_time = {}    
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° realtime ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
realtime_messages = {}
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö task ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° realtime
realtime_tasks = {}

# ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ startup ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á uptime
startup_time = time.time()

# ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á log ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
LOG_CHANNEL_ID = int(os.getenv('LOG_CHANNEL_ID'))

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô on_ready ‡∏ã‡πâ‡∏≥
on_ready_called = False

# ================= ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =================
def save_data():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        file_path = os.path.join(DATA_DIR, 'voice_time.json')
        temp_path = file_path + '.tmp'
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        save_data_dict = {}
        for guild_id in voice_time:
            save_data_dict[guild_id] = {}
            for user_id in voice_time[guild_id]:
                save_data_dict[guild_id][user_id] = {
                    'total_time': float(voice_time[guild_id][user_id]['total_time']),
                    'join_time': float(voice_time[guild_id][user_id]['join_time']) if voice_time[guild_id][user_id]['join_time'] else None
                }
        
        with open(temp_path, 'w', encoding='utf-8') as f:
            json.dump(save_data_dict, f, indent=2, ensure_ascii=False)
        
        if os.path.exists(file_path):
            os.remove(file_path)
        os.rename(temp_path, file_path)
        print(f"{datetime.now().strftime('%H:%M:%S')} üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"{datetime.now().strftime('%H:%M:%S')} ‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

def load_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    global voice_time
    file_path = os.path.join(DATA_DIR, 'voice_time.json')
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                voice_time = json.load(f)
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            for guild_id in voice_time:
                for user_id in voice_time[guild_id]:
                    voice_time[guild_id][user_id]['total_time'] = float(voice_time[guild_id][user_id]['total_time'])
                    voice_time[guild_id][user_id]['join_time'] = (
                        float(voice_time[guild_id][user_id]['join_time'])
                        if voice_time[guild_id][user_id]['join_time'] else None
                    )
            print(f"{datetime.now().strftime('%H:%M:%S')} üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            voice_time = {}
            print(f"{datetime.now().strftime('%H:%M:%S')} ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
    except Exception as e:
        print(f"{datetime.now().strftime('%H:%M:%S')} ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        voice_time = {}

# ================= ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå =================
async def update_realtime_message(channel, member, start_time):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
    üéß <display_name> ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á: <channel_name> | ‡πÄ‡∏ß‡∏•‡∏≤: 0h 4m 14s
    """
    try:
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        message = await channel.send(f"üéß {member.display_name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á: {member.voice.channel.name} | ‡πÄ‡∏ß‡∏•‡∏≤: 0h 0m 0s")
        realtime_messages[member.id] = message

        while member.id in realtime_messages:
            elapsed = int(time.time() - start_time)
            hours = elapsed // 3600
            minutes = (elapsed % 3600) // 60
            seconds = elapsed % 60
            new_content = (f"üéß {member.display_name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á: {member.voice.channel.name} | "
                           f"‡πÄ‡∏ß‡∏•‡∏≤: {hours}h {minutes}m {seconds}s")
            await message.edit(content=new_content)
            await asyncio.sleep(5)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    except Exception as e:
        print(f"Error updating realtime message: {e}")

# ================= ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á =================
@bot.event
async def on_voice_state_update(member, before, after):
    # ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó
    if member.bot:
        return

    guild_id = str(member.guild.id)
    user_id = str(member.id)

    # ========== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡∏•‡∏≤ ==========
    if guild_id not in voice_time:
        voice_time[guild_id] = {}

    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á (‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    if before.channel:
        if user_id in voice_time[guild_id]:
            data = voice_time[guild_id][user_id]
            if data['join_time'] is not None:
                elapsed = time.time() - data['join_time']
                data['total_time'] += elapsed
                data['join_time'] = None
                print(f"{datetime.now().strftime('%H:%M:%S')} ‚è≥ {member.display_name} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed:.2f}s")
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    if after.channel:
        voice_time[guild_id][user_id] = {
            'total_time': voice_time[guild_id].get(user_id, {}).get('total_time', 0.0),
            'join_time': time.time()
        }

    # ========== ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ==========
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    if not log_channel:
        return

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢)
    if after.channel and not before.channel:
        start_time = time.time()
        realtime_tasks[member.id] = asyncio.create_task(update_realtime_message(log_channel, member, start_time))
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
    elif before.channel and not after.channel:
        if member.id in realtime_tasks:
            realtime_tasks[member.id].cancel()
            del realtime_tasks[member.id]
        if member.id in realtime_messages:
            message = realtime_messages.pop(member.id)
            # ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ join_time ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ)
            elapsed = int(time.time() - voice_time[guild_id][user_id]['join_time']) if voice_time[guild_id][user_id]['join_time'] else 0
            hours = elapsed // 3600
            minutes = (elapsed % 3600) // 60
            seconds = elapsed % 60
            final_content = (f"üéß {member.display_name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á: {before.channel.name} | "
                             f"‡πÄ‡∏ß‡∏•‡∏≤: {hours}h {minutes}m {seconds}s")
            try:
                await message.edit(content=final_content)
            except Exception as e:
                print(f"Error editing final realtime message: {e}")
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á
    elif before.channel and after.channel:
        if member.id in realtime_tasks:
            realtime_tasks[member.id].cancel()
            del realtime_tasks[member.id]
        if member.id in realtime_messages:
            message = realtime_messages.pop(member.id)
            try:
                await message.edit(content=f"üéß {member.display_name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á: {before.channel.name}")
            except Exception as e:
                print(f"Error editing realtime message on channel change: {e}")
        start_time = time.time()
        realtime_tasks[member.id] = asyncio.create_task(update_realtime_message(log_channel, member, start_time))

# ================= ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ã‡∏ü‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ =================
@tasks.loop(minutes=30)
async def auto_save():
    save_data()
    print(f"{datetime.now().strftime('%H:%M:%S')} üîÑ ‡πÄ‡∏ã‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

# ================= ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ =================
@bot.command()
@commands.cooldown(1, 5, commands.BucketType.user)
async def topvoice(ctx):
    """‡πÅ‡∏™‡∏î‡∏á 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
    guild_id = str(ctx.guild.id)
    
    if not voice_time.get(guild_id):
        await ctx.send("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")
        return

    rankings = []
    for user_id, data in voice_time[guild_id].items():
        try:
            total = data['total_time']
            if data['join_time'] is not None:
                total += time.time() - data['join_time']
            
            user = await bot.fetch_user(int(user_id))
            rankings.append((user.display_name, total))
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id}: {e}")

    rankings.sort(key=lambda x: x[1], reverse=True)
    
    message = "üèÜ **‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á**\n"
    for i, (user, total) in enumerate(rankings[:10], 1):
        hours = int(total // 3600)
        minutes = int((total % 3600) // 60)
        seconds = int(total % 60)
        message += f"{i}. {user} - {hours}h {minutes}m {seconds}s\n"
    
    await ctx.send(message)

@bot.command()
@commands.cooldown(1, 5, commands.BucketType.user)
async def mytime(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    guild_id = str(ctx.guild.id)
    user_id = str(ctx.author.id)
    
    if not voice_time.get(guild_id, {}).get(user_id):
        await ctx.send("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!")
        return
    
    data = voice_time[guild_id][user_id]
    total = data['total_time']
    if data['join_time'] is not None:
        total += time.time() - data['join_time']
    
    hours = int(total // 3600)
    minutes = int((total % 3600) // 60)
    seconds = int(total % 60)
    await ctx.send(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {hours}h {minutes}m {seconds}s")

@bot.command()
@commands.cooldown(1, 5, commands.BucketType.user)
async def save(ctx):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"""
    if ctx.author.guild_permissions.administrator:
        save_data()
        await ctx.send("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
    else:
        await ctx.send("‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏à‡πã‡∏á ‡πÜ

@bot.command()
@commands.cooldown(1, 5, commands.BucketType.user)
async def ping(ctx):
    """‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (Latency)"""
    latency = bot.latency * 1000  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    await ctx.send(f"üèì Pong! Latency: {latency:.0f} ms")

@bot.command()
@commands.cooldown(1, 5, commands.BucketType.user)
async def uptime(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ uptime ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"""
    elapsed = int(time.time() - startup_time)
    hours = elapsed // 3600
    minutes = (elapsed % 3600) // 60
    seconds = elapsed % 60
    await ctx.send(f"üöÄ Uptime: {hours}h {minutes}m {seconds}s")

@bot.command()
@commands.cooldown(1, 10, commands.BucketType.guild)
async def reset(ctx):
    """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"""
    if ctx.author.guild_permissions.administrator:
        guild_id = str(ctx.guild.id)
        voice_time[guild_id] = {}
        save_data()
        await ctx.send("üîÑ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß!")
    else:
        await ctx.send("‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")

# ================= ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞ event ‡∏ï‡πà‡∏≤‡∏á ‡πÜ =================
@bot.event
async def on_ready():
    global on_ready_called
    if on_ready_called:
        return
    on_ready_called = True
    load_data()
    auto_save.start()
    print(f"{datetime.now().strftime('%H:%M:%S')} ‚úÖ {bot.user} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

@bot.event
async def on_disconnect():
    save_data()

if __name__ == "__main__":
    bot.run(os.getenv('DISCORD_TOKEN'))
